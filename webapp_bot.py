import os
import json
import logging
import asyncio
from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
import time
from database import Database
from webapp_database import WebAppDatabase

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
APP_VERSION = "3.4.0"

# –ü—É—Ç–∏ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
GAME_DB_PATH = os.path.join(BASE_DIR, 'data', 'game.db')
WEBAPP_DB_PATH = os.path.join(BASE_DIR, 'data', 'webapp.db')

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
os.makedirs(os.path.join(BASE_DIR, 'data'), exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
db = Database(GAME_DB_PATH)  # –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
webapp_db = WebAppDatabase(WEBAPP_DB_PATH)  # –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

async def cleanup_task(context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
    try:
        db.cleanup_old_records()
        logger.info("–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    try:
        webapp_db.get_or_create_user(user_id)
    except Exception as e:
        logger.error(f"Error creating user {user_id}: {e}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    webapp_url = "https://alekseevdev.github.io/tapper-game/"

    keyboard = [[InlineKeyboardButton(
        "–ò–≥—Ä–∞—Ç—å", 
        web_app=WebAppInfo(url=webapp_url)
    )]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tapper Game!\n–ù–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ò–≥—Ä–∞—Ç—å', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=reply_markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if update.message.text == "CONSOLEMOD":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        admin_id = context.bot_data.get('admin_id')
        if not admin_id:
            # –ü–µ—Ä–≤—ã–π, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª CONSOLEMOD, —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
            context.bot_data['admin_id'] = update.effective_user.id
            await update.message.reply_text("–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω-–∫–æ–Ω—Å–æ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.")
        elif admin_id == update.effective_user.id:
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∞–¥–º–∏–Ω-–∫–æ–Ω—Å–æ–ª–∏
            admin_url = "https://alekseevdev.github.io/tapper-game/admin.html"
            
            keyboard = [[InlineKeyboardButton(
                "–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–∫–æ–Ω—Å–æ–ª—å", 
                web_app=WebAppInfo(url=admin_url)
            )]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–ê–¥–º–∏–Ω-–∫–æ–Ω—Å–æ–ª—å:", reply_markup=reply_markup)
        else:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–ª–∏ –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = update.effective_user.id
        if not user_id:
            logger.error("No user ID in update")
            await update.message.reply_text("Error: Could not identify user")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        try:
            data = json.loads(update.effective_message.web_app_data.data)
            logger.info(f"Received webapp data: {data} from user {user_id}")
        except json.JSONDecodeError as e:
            logger.error(f"Invalid JSON data from user {user_id}: {e}")
            await update.message.reply_text("Error: Invalid data format")
            return
        
        if data.get('action') == 'gameEnd':
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_data = webapp_db.get_or_create_user(user_id)
            if not current_data:
                logger.error(f"Could not get/create user {user_id}")
                await update.message.reply_text("Error: Could not access user data")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
            score = max(0, int(data.get('score', 0)))
            taps_per_minute = max(0, int(data.get('tapsPerMinute', 0)))
            tap_power = max(1, int(data.get('tapPower', 1)))
            coins_earned = max(0, int(data.get('coinsEarned', score // 10)))
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–æ–≤
            update_data = {
                'nickname': str(data.get('nickname', current_data['nickname'])),
                'avatar': str(data.get('avatar', current_data['avatar'])),
                'total_taps': current_data['total_taps'] + score,
                'best_score': max(current_data['best_score'], score),
                'tap_power': tap_power,
                'taps_per_minute': max(current_data['taps_per_minute'], taps_per_minute),
                'coins': current_data['coins'] + coins_earned
            }
            
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
                webapp_db.update_user_data(user_id, update_data)
                logger.info(f"Successfully updated data for user {user_id}")
            except Exception as e:
                logger.error(f"Failed to update user data for {user_id}: {e}")
                await update.message.reply_text("Error: Could not save game results")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            try:
                if score > 1000:
                    webapp_db.record_achievement(current_data['id'], 'high_score', score)
                if taps_per_minute > 100:
                    webapp_db.record_achievement(current_data['id'], 'speed_demon', taps_per_minute)
            except Exception as e:
                logger.error(f"Failed to record achievements for {user_id}: {e}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            message = (
                f"üéÆ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {score} —Ç–∞–ø–æ–≤\n"
                f"‚ö° –¢–∞–ø–æ–≤ –≤ –º–∏–Ω—É—Ç—É: {taps_per_minute}\n"
                f"üèÜ –í—Å–µ–≥–æ —Ç–∞–ø–æ–≤: {update_data['total_taps']}\n"
                f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ –º–æ–Ω–µ—Ç: {coins_earned}"
            )
            
            if score >= update_data['best_score']:
                message += "\nüåü –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!"
            
            await update.message.reply_text(message)

        elif data.get('action') == 'getLeaderboard':
            try:
                leaderboard = webapp_db.get_leaderboard()
                response_data = {
                    'status': 'success',
                    'leaderboard': [{
                        'user_id': entry['telegram_id'],
                        'nickname': entry['nickname'],
                        'avatar': entry['avatar'],
                        'totalTaps': entry['total_taps'],
                        'bestScore': entry['best_score'],
                        'tapsPerMinute': entry['taps_per_minute'],
                        'lastActive': entry['last_active']
                    } for entry in leaderboard],
                    'currentUserId': user_id,
                    'total_players': len(leaderboard)
                }
                logger.info(f"Sending leaderboard data: {len(leaderboard)} entries")
                await update.message.reply_text(json.dumps(response_data))
            except Exception as e:
                logger.error(f"Failed to get leaderboard: {e}")
                await update.message.reply_text(json.dumps({
                    'status': 'error',
                    'message': "Could not load leaderboard"
                }))

        elif data.get('action') == 'loadUserData':
            try:
                player = webapp_db.get_or_create_user(user_id)
                if not player:
                    raise ValueError("Could not load user data")
                
                response_data = {
                    'status': 'success',
                    'data': {
                        'user_id': player['telegram_id'],
                        'nickname': player['nickname'],
                        'avatar': player['avatar'],
                        'total_taps': player['total_taps'],
                        'best_score': player['best_score'],
                        'tap_power': player['tap_power'],
                        'taps_per_minute': player['taps_per_minute'],
                        'coins': player['coins']
                    }
                }
                await update.message.reply_text(json.dumps(response_data))
                logger.info(f"Sent user data to client: {response_data}")
            except Exception as e:
                logger.error(f"Failed to load user data for {user_id}: {e}")
                await update.message.reply_text("Error: Could not load user data")

        elif data.get('action') == 'updateProfile':
            try:
                current_data = webapp_db.get_or_create_user(user_id)
                if not current_data:
                    raise ValueError("Could not access user data")
                
                update_data = {
                    'nickname': str(data.get('nickname', current_data['nickname'])),
                    'avatar': str(data.get('avatar', current_data['avatar']))
                }
                webapp_db.update_user_data(user_id, update_data)
                await update.message.reply_text(json.dumps({'status': 'success'}))
            except Exception as e:
                logger.error(f"Failed to update profile for {user_id}: {e}")
                await update.message.reply_text("Error: Could not update profile")

    except Exception as e:
        logger.error(f"Error handling webapp data: {e}")
        await update.message.reply_text(json.dumps({
            'status': 'error',
            'message': str(e)
        }))

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞
        with open('token.txt', 'r') as f:
            token = f.read().strip()

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(token).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp_data))

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (–∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞)
        application.job_queue.run_repeating(cleanup_task, interval=86400)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main() 