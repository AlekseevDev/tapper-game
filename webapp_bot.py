import os
import json
import logging
import asyncio
from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
import time
from database import Database

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
APP_VERSION = "2.1.3"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database('game.db')

async def cleanup_task(context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
    try:
        db.cleanup_old_records()
        logger.info("–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [[InlineKeyboardButton(
        "–ò–≥—Ä–∞—Ç—å", 
        web_app=WebAppInfo(url=f"https://alekseevdev.github.io/tapper-game/?v={APP_VERSION}&t={int(time.time())}")
    )]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tapper Game!\n–ù–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ò–≥—Ä–∞—Ç—å', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=reply_markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if update.message.text == "CONSOLEMOD":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        admin_id = context.bot_data.get('admin_id')
        if not admin_id:
            # –ü–µ—Ä–≤—ã–π, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª CONSOLEMOD, —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
            context.bot_data['admin_id'] = update.effective_user.id
            await update.message.reply_text("–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω-–∫–æ–Ω—Å–æ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.")
        elif admin_id == update.effective_user.id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω-–∫–æ–Ω—Å–æ–ª—å
            keyboard = [[InlineKeyboardButton(
                "–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–∫–æ–Ω—Å–æ–ª—å", 
                web_app=WebAppInfo(url=f"https://alekseevdev.github.io/tapper-game/admin.html?v={APP_VERSION}&t={int(time.time())}")
            )]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–ê–¥–º–∏–Ω-–∫–æ–Ω—Å–æ–ª—å:", reply_markup=reply_markup)
        else:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        data = json.loads(update.effective_message.web_app_data.data)
        user_id = update.effective_user.id
        
        if data.get('action') == 'gameEnd':
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
            current_player = db.get_player(user_id) or {
                'total_taps': 0,
                'best_score': 0,
                'tap_power': 1
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
            new_total_taps = current_player['total_taps'] + data.get('score', 0)
            new_best_score = max(current_player['best_score'], data.get('score', 0))
            
            player_data = {
                'nickname': data.get('nickname', '–ò–≥—Ä–æ–∫'),
                'avatar': data.get('avatar', 'avatar1'),
                'total_taps': new_total_taps,
                'best_score': new_best_score,
                'tap_power': data.get('tapPower', current_player['tap_power']),
                'taps_per_minute': data.get('tapsPerMinute', 0)
            }
            db.update_player(user_id, player_data)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            message = (
                f"üéÆ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {data['score']} —Ç–∞–ø–æ–≤\n"
                f"‚ö° –¢–∞–ø–æ–≤ –≤ –º–∏–Ω—É—Ç—É: {data['tapsPerMinute']}\n"
                f"üèÜ –í—Å–µ–≥–æ —Ç–∞–ø–æ–≤: {new_total_taps}"
            )
            
            if data['score'] >= new_best_score:
                message += "\nüåü –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!"
            
            await update.message.reply_text(message)

        elif data.get('action') == 'getLeaderboard':
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
            leaderboard = db.get_leaderboard()
            await update.message.reply_text(
                json.dumps({'leaderboard': leaderboard}),
                disable_web_page_preview=True
            )

        elif data.get('action') == 'checkSubscription':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
            channel = data.get('channel', '').replace('@', '')
            try:
                member = await context.bot.get_chat_member(f"@{channel}", user_id)
                is_member = member.status in ['member', 'administrator', 'creator']
                if is_member:
                    # –û—Ç–º–µ—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
                    db.complete_task(user_id, f"channel_{channel}")
                await update.message.reply_text(json.dumps({'subscribed': is_member}))
            except Exception as e:
                await update.message.reply_text(json.dumps({'subscribed': False, 'error': str(e)}))

        elif data.get('action') == 'adminUpdate':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if user_id == context.bot_data.get('admin_id'):
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                global APP_VERSION
                APP_VERSION = data.get('version', APP_VERSION)
                await update.message.reply_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞
        with open('token.txt', 'r') as f:
            token = f.read().strip()

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(token).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp_data))

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (–∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞)
        application.job_queue.run_repeating(cleanup_task, interval=86400)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main() 