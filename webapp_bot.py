import os
import json
import logging
from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup, ChatMember
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from dotenv import load_dotenv
import time

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = "7480394291:AAFm2nXc685V7MR5ZiuXklk3LpXz8YtkqwA"
WEBAPP_URL = "https://alekseevdev.github.io/tapper-game/"
APP_VERSION = "2.1.0"

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}
leaderboard = {}

# –°–∫–∏–Ω—ã –∏ –∏—Ö —É—Å–ª–æ–≤–∏—è
SKINS = {
    'default': {'name': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π', 'requirement': 0},
    'bronze': {'name': '–ë—Ä–æ–Ω–∑–æ–≤—ã–π', 'requirement': 100},
    'silver': {'name': '–°–µ—Ä–µ–±—Ä—è–Ω—ã–π', 'requirement': 500},
    'gold': {'name': '–ó–æ–ª–æ—Ç–æ–π', 'requirement': 1000}
}

# –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
ACHIEVEMENTS = [
    {'id': 'first100', 'name': '100 —Ç–∞–ø–æ–≤', 'requirement': 100},
    {'id': 'first500', 'name': '500 —Ç–∞–ø–æ–≤', 'requirement': 500},
    {'id': 'first1000', 'name': '1000 —Ç–∞–ø–æ–≤', 'requirement': 1000}
]

def init_user_data(user_id, username):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_data:
        user_data[user_id] = {
            'username': username,
            'total_taps': 0,
            'best_score': 0,
            'current_skin': 'default',
            'unlocked_skins': ['default'],
            'achievements': [],
            'app_version': None  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        }

def check_achievements(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = user_data[user_id]
    new_achievements = []
    
    for achievement in ACHIEVEMENTS:
        if (achievement['id'] not in user['achievements'] and 
            user['total_taps'] >= achievement['requirement']):
            user['achievements'].append(achievement['id'])
            new_achievements.append(achievement['name'])
    
    return new_achievements

def check_skins(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–∏–Ω–æ–≤"""
    user = user_data[user_id]
    new_skins = []
    
    for skin_id, skin_data in SKINS.items():
        if (skin_id not in user['unlocked_skins'] and 
            user['total_taps'] >= skin_data['requirement']):
            user['unlocked_skins'].append(skin_id)
            new_skins.append(skin_data['name'])
    
    return new_skins

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ò–≥—Ä–æ–∫"
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    init_user_data(user_id, username)
    user = user_data[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if user['app_version'] != APP_VERSION:
        user['app_version'] = APP_VERSION
        webapp_url = f"{WEBAPP_URL}?v={APP_VERSION}"  # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ URL
    else:
        webapp_url = WEBAPP_URL
    
    keyboard = [[
        InlineKeyboardButton(
            "üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
            web_app=WebAppInfo(url=webapp_url)
        )
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –¢–∞–ø–∞–ª–∫–∞!\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É:",
        reply_markup=reply_markup
    )

async def check_subscription(bot, user_id, channel_username):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        chat_member = await bot.get_chat_member(chat_id=channel_username, user_id=user_id)
        return chat_member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logging.error(f"Error checking subscription: {e}")
        return False

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ü—É—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —Ç–∞–∫ –∫–∞–∫ –∞–¥–º–∏–Ω-–∫–æ–Ω—Å–æ–ª—å —É–¥–∞–ª–µ–Ω–∞
    pass

async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        data = json.loads(update.effective_message.web_app_data.data)
        user_id = update.effective_user.id
        username = update.effective_user.username or "–ò–≥—Ä–æ–∫"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        init_user_data(user_id, username)
        user = user_data[user_id]
        
        if data['action'] == 'gameEnd':
            score = data['score']
            total_taps = data.get('totalTaps', score)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            user['total_taps'] = total_taps
            if score > user['best_score']:
                user['best_score'] = score
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Å–∫–∏–Ω—ã
            new_achievements = check_achievements(user_id)
            new_skins = check_skins(user_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
            leaderboard[user_id] = {
                'username': username,
                'best_score': user['best_score']
            }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            message = f"üéØ –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} —Ç–∞–ø–æ–≤\n"
            
            if score > user['best_score']:
                message += "üèÜ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!\n\n"
            
            if new_achievements:
                message += "üéâ –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n"
                for achievement in new_achievements:
                    message += f"‚ú® {achievement}\n"
                message += "\n"
            
            if new_skins:
                message += "üé® –ù–æ–≤—ã–µ —Å–∫–∏–Ω—ã:\n"
                for skin in new_skins:
                    message += f"üéÅ {skin}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
            keyboard = [[
                InlineKeyboardButton(
                    "üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞",
                    web_app=WebAppInfo(url=WEBAPP_URL)
                )
            ]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.effective_message.reply_text(
                message,
                reply_markup=reply_markup
            )
        elif data['action'] == 'checkSubscription':
            channel = data.get('channel')
            if channel:
                is_subscribed = await check_subscription(context.bot, user_id, channel)
                await update.effective_message.reply_text(
                    json.dumps({'subscribed': is_subscribed})
                )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        await update.effective_message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö."
        )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp_data))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 