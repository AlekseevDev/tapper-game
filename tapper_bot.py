import os
import logging
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = "7480394291:AAFm2nXc685V7MR5ZiuXklk3LpXz8YtkqwA"  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
GAME_DURATION = 30  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_scores = {}  # –û–±—â–∏–µ –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
active_games = {}  # –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã
leaderboard = {}  # –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤

def format_time(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
    return str(timedelta(seconds=seconds)).split('.')[0]

def create_game_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏–≥—Ä—ã"""
    keyboard = [
        [InlineKeyboardButton("üéØ –¢–ê–ü! üéØ", callback_data='tap')],
        [InlineKeyboardButton("üèÅ –ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É", callback_data='end_game')]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_main_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    keyboard = [
        [InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data='start_game')],
        [InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data='leaderboard')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ö–∞–∫ –∏–≥—Ä–∞—Ç—å", callback_data='help')]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ò–≥—Ä–æ–∫"
    
    if user_id not in user_scores:
        user_scores[user_id] = 0
        leaderboard[user_id] = {"username": username, "best_score": 0}
    
    await update.message.reply_text(
        f"üéÆ –ü—Ä–∏–≤–µ—Ç, {username}!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –¢–ê–ü–ê–õ–ö–ê!\n"
        "–¢–∞–ø–∞–π –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –∏ –ø–æ–±–µ–π —Ä–µ–∫–æ—Ä–¥!\n\n"
        f"üèÜ –¢–≤–æ–π –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {leaderboard[user_id]['best_score']} —Ç–∞–ø–æ–≤",
        reply_markup=create_main_keyboard()
    )

async def game_timer(context: ContextTypes.DEFAULT_TYPE):
    """–¢–∞–π–º–µ—Ä –∏–≥—Ä—ã"""
    job = context.job
    chat_id = job.data['chat_id']
    user_id = job.data['user_id']
    
    if user_id in active_games:
        score = active_games[user_id]['score']
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if score > leaderboard[user_id]['best_score']:
            leaderboard[user_id]['best_score'] = score
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∫ –æ–±—â–µ–º—É —Å—á–µ—Ç—É
        user_scores[user_id] += score
        
        await context.bot.edit_message_text(
            f"üéÆ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n\n"
            f"üéØ –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} —Ç–∞–ø–æ–≤\n"
            f"üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {leaderboard[user_id]['best_score']} —Ç–∞–ø–æ–≤\n"
            f"üí´ –í—Å–µ–≥–æ –æ—á–∫–æ–≤: {user_scores[user_id]}",
            chat_id=chat_id,
            message_id=active_games[user_id]['message_id'],
            reply_markup=create_main_keyboard()
        )
        del active_games[user_id]

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    user_id = query.from_user.id
    chat_id = query.message.chat_id
    
    if query.data == 'start_game':
        if user_id in active_games:
            await query.answer("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
        active_games[user_id] = {
            'score': 0,
            'start_time': datetime.now(),
            'message_id': query.message.message_id
        }
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        context.job_queue.run_once(
            game_timer,
            GAME_DURATION,
            data={'chat_id': chat_id, 'user_id': user_id}
        )
        
        await query.edit_message_text(
            f"üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n"
            f"‚è± –í—Ä–µ–º—è: {GAME_DURATION} —Å–µ–∫—É–Ω–¥\n"
            f"üéØ –û—á–∫–∏: 0",
            reply_markup=create_game_keyboard()
        )
    
    elif query.data == 'tap':
        if user_id not in active_games:
            await query.answer("–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞! –ù–∞—á–Ω–∏ –Ω–æ–≤—É—é –∏–≥—Ä—É.")
            return
        
        game = active_games[user_id]
        game['score'] += 1
        
        time_left = GAME_DURATION - (datetime.now() - game['start_time']).seconds
        if time_left < 0:
            time_left = 0
        
        await query.answer()
        await query.edit_message_text(
            f"üéÆ –¢–∞–ø–∞–π –±—ã—Å—Ç—Ä–µ–µ!\n"
            f"‚è± –û—Å—Ç–∞–ª–æ—Å—å: {time_left} —Å–µ–∫\n"
            f"üéØ –û—á–∫–∏: {game['score']}",
            reply_markup=create_game_keyboard()
        )
    
    elif query.data == 'end_game':
        if user_id in active_games:
            # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä
            for job in context.job_queue.get_jobs_by_name(str(user_id)):
                job.schedule_removal()
            
            # –í—ã–∑—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
            await game_timer(context._context)
        await query.answer("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    elif query.data == 'leaderboard':
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
        sorted_leaders = sorted(
            leaderboard.items(),
            key=lambda x: x[1]['best_score'],
            reverse=True
        )[:10]
        
        leaderboard_text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n"
        for i, (_, data) in enumerate(sorted_leaders, 1):
            leaderboard_text += f"{i}. {data['username']}: {data['best_score']} —Ç–∞–ø–æ–≤\n"
        
        await query.edit_message_text(
            leaderboard_text,
            reply_markup=create_main_keyboard()
        )
    
    elif query.data == 'help':
        await query.edit_message_text(
            "üéÆ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ –¢–ê–ü–ê–õ–ö–£:\n\n"
            "1. –ù–∞–∂–º–∏ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'\n"
            "2. –£ —Ç–µ–±—è –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥\n"
            "3. –¢–∞–ø–∞–π –ø–æ –∫–Ω–æ–ø–∫–µ 'üéØ –¢–ê–ü! üéØ' –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ\n"
            "4. –ü–æ–±–µ–π —Å–≤–æ–π —Ä–µ–∫–æ—Ä–¥ –∏ —Å—Ç–∞–Ω—å –ª—É—á—à–∏–º –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤!\n\n"
            "–£–¥–∞—á–∏! üçÄ",
            reply_markup=create_main_keyboard()
        )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 